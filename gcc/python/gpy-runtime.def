/* This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

autogen definitions gpy-runtime;

py-runtime = { code = GPY_RR_extendRRStack;
	       arguments = "tree size, tree id, tree elems";
	       proto = "tree, tree, tree";
	       comment = "/* Extends shizzle */";
               function_identifier = "gpy_rr_extendRRStack";
               fntype = "sizetype,
	                 integer_type_node,
			 gpy_const_char_ptr,
			 ptr_type_node,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 3, size, id, elems";
	     };
py-runtime = { code = GPY_RR_fold_string;
	       arguments = "tree decl";
	       proto = "tree";
	       comment = "/* fold string */";
               function_identifier = "gpy_rr_fold_string";
               fntype = "gpy_object_type_ptr,
			 gpy_const_char_ptr,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, decl";
	     };
py-runtime = { code = GPY_RR_foldImport;
	       arguments = "tree decl, tree entry";
	       proto = "tree, tree";
	       comment = "/* do flat import */";
               function_identifier = "gpy_rr_foldImport";
               fntype = "void_type_node,
	                 gpy_object_type_ptr_ptr,
			 gpy_const_char_ptr,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, decl, entry";
	     };
py-runtime = { code = GPY_RR_foldBuiltinImport;
	       arguments = "tree decl, tree entry";
	       proto = "tree, tree";
	       comment = "/* do builtin import */";
               function_identifier = "gpy_rr_foldBuiltinImport";
               fntype = "void_type_node,
	                 gpy_object_type_ptr_ptr,
			 unsigned_type_node,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, decl, entry";
	     };
py-runtime = { code = GPY_RR_makeSlice;
	       arguments = "tree object, tree slice";
	       proto = "tree, tree";
	       comment = "/* Get slice of object */";
               function_identifier = "gpy_rr_getSlice";
               fntype = "gpy_object_type_ptr,
	                 gpy_object_type_ptr,
			 gpy_object_type_ptr,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, object, slice";
             };
py-runtime = { code = GPY_RR_makeRefSlice;
	       arguments = "tree object, tree slice";
	       proto = "tree, tree";
	       comment = "/* Get slice of object */";
               function_identifier = "gpy_rr_getRefSlice";
               fntype = "gpy_object_type_ptr_ptr,
	                 gpy_object_type_ptr,
			 gpy_object_type_ptr,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, object, slice";
             };
py-runtime = { code = GPY_RR_fold_attrib;
	       arguments = "tree ident, tree addr, tree offset, tree nargs";
	       proto = "tree, tree, tree, tree";
	       comment = "/* Fold attribute info into an attribute type */";
               function_identifier = "gpy_rr_fold_attribute";
               fntype = "gpy_attrib_type_ptr,
                         gpy_const_char_ptr,
                         gpy_unsigned_char_ptr,
                         integer_type_node,
			 integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 4, ident, addr, offset, nargs";
             };
py-runtime = { code = GPY_RR_fold_attrib_list;
	       arguments = "vec<tree,va_gc> * attribs";
	       proto = "vec<tree,va_gc> *";
	       comment = "/* Requires the first tree in the arguments to be an integer_type_node of the number of arguments */";
	       function_identifier = "gpy_rr_fold_attrib_list";
               fntype = "gpy_attrib_type_ptr_ptr,
			 integer_type_node,
			 va_list_type_node,
			 NULL_TREE";
	       build_call = build_call_expr_loc_vec;
	       build_call_args = "BUILTINS_LOCATION, fndecl, attribs";
             };
py-runtime = { code = GPY_RR_fold_class_decl;
	       arguments = "tree attrib_list, tree size, tree identifier";
	       proto = "tree, tree, tree";
	       comment = "/* Fold class data into class object args = <attrib list><size><identifier> */";
               function_identifier = "gpy_rr_fold_class_decl";
               fntype = "gpy_object_type_ptr,
	       	         gpy_attrib_type_ptr_ptr,
			 integer_type_node,
                         gpy_const_char_ptr,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 3, attrib_list, size, identifier";
             };
py-runtime = { code = GPY_RR_fold_func_decl;
	       arguments = "tree identifier, tree func, tree nargs";
	       proto = "tree, tree, tree";
	       comment = "/* Fold func into decl <identifier><fndcel><nargs> */";
               function_identifier = "gpy_rr_fold_staticmethod_decl";
               fntype = "gpy_object_type_ptr,
                         gpy_const_char_ptr,
			 ptr_type_node,
			 integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 3, identifier, build_fold_addr_expr (func), nargs";
             };
py-runtime = { code = GPY_RR_fold_classmethod_decl;
	       arguments = "tree identifier, tree func, tree nargs";
	       proto = "tree, tree, tree";
	       comment = "/* Fold func into decl <identifier><fndcel><nargs> */";
               function_identifier = "gpy_rr_fold_classmethod_decl";
               fntype = "gpy_object_type_ptr,
                         gpy_const_char_ptr,
			 ptr_type_node,
			 integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 3, identifier, build_fold_addr_expr (func), nargs";
             };
py-runtime = { code = GPY_RR_fold_integer;
	       arguments = "tree integer";
	       proto = "tree";
	       comment = "/* Fold integer into Int object  via Int (x) */";
               function_identifier = "gpy_rr_fold_integer";
               fntype = "gpy_object_type_ptr,
		         integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, integer";
             };
py-runtime = { code = GPY_RR_fold_encList;
	       arguments = "vec<tree,va_gc> * elms";
	       proto = "vec<tree,va_gc> *";
	       comment = "/* Fold enclosure list via List (1,2,3,...) */";
               function_identifier = "gpy_rr_fold_encList";
               fntype = "gpy_object_type_ptr,
		         integer_type_node,
			 va_list_type_node,
                         NULL_TREE";
	       build_call = build_call_expr_loc_vec;
	       build_call_args = "BUILTINS_LOCATION, fndecl, elms";
             };
py-runtime = { code = GPY_RR_incr_ref_count;
	       arguments = "tree obj";
	       proto = "tree";
	       comment = "/* incr the refrence count on the object  */";
               function_identifier = "gpy_rr_incr_ref_count";
               fntype = "void_type_node,
		         gpy_object_type_ptr,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, obj";
             };
py-runtime = { code = GPY_RR_decr_ref_count;
	       arguments = "tree obj";
	       proto = "tree";
	       comment = "/* decr the refrence count on the object  */";
               function_identifier = "gpy_rr_decr_ref_count";
               fntype = "void_type_node,
		         gpy_object_type_ptr,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, obj";
             };
py-runtime = { code = GPY_RR_eval_print;
	       arguments = "vec<tree,va_gc> * arguments";
	       proto = "vec<tree,va_gc> *";
	       comment = "/* first index is the fd (1/0) 2nd idx is number of elements and finaly va_list of args */";
	       function_identifier = "gpy_rr_eval_print";
               fntype = "void_type_node,
			 integer_type_node,
			 integer_type_node,
			 va_list_type_node,
			 NULL_TREE";
	       build_call = build_call_expr_loc_vec;
	       build_call_args = "BUILTINS_LOCATION, fndecl, arguments";
             };

py-runtime = { code = GPY_RR_eval_return;
	       arguments = "tree val";
	       proto = "tree";
	       comment = "/* gen return stmt */";
	       function_identifier = "gpy_rr_eval_return";
               fntype = "void_type_node,
	                 gpy_object_type_ptr,
			 NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, val";
             };
py-runtime = { code = GPY_RR_eval_expression;
	       arguments = "tree x, tree y, tree op";
	       proto = "tree, tree, tree";
	       comment = "/* Evaluate the operation op of the 2 objects x and y and return result */";
               function_identifier = "gpy_rr_eval_expression";
               fntype = "gpy_object_type_ptr,
	       	         gpy_object_type_ptr,
			 integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 3, x, y, op";
             };
py-runtime = { code = GPY_RR_fold_attrib_ref;
	       arguments = "tree base, tree attrib";
	       proto = "tree, tree";
	       comment = "/* Eval base.attrib */";
               function_identifier = "gpy_rr_eval_attrib_reference";
               fntype = "gpy_object_type_ptr_ptr,
	       	      	 gpy_object_type_ptr,
			 gpy_const_char_ptr,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, base, attrib";
             };
py-runtime = { code = GPY_RR_fold_call;
	       arguments = "vec<tree,va_gc> * arguments";
	       proto = "vec<tree,va_gc> *";
	       comment = "/* Eval call */";
               function_identifier = "gpy_rr_fold_call";
               fntype = "gpy_object_type_ptr,
	       	      	 integer_type_node,
			 va_list_type_node,
                         NULL_TREE";
	       build_call = build_call_expr_loc_vec;
	       build_call_args = "BUILTINS_LOCATION, fndecl, arguments";
             };
py-runtime = { code = GPY_RR_fold_argument;
	       arguments = "tree args, tree offset";
	       proto = "tree, tree";
	       comment = "/* Eval arg */";
               function_identifier = "gpy_rr_fold_argument";
               fntype = "gpy_object_type_ptr,
	       	      	 gpy_object_type_ptr_ptr,
			 integer_type_node,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 2, args, offset";
             };
py-runtime = { code = GPY_RR_eval_boolean;
	       arguments = "tree res";
	       proto = "tree";
	       comment = "/* Eval result */";
               function_identifier = "gpy_rr_eval_boolean";
               fntype = "boolean_type_node,
	       	      	 gpy_object_type_ptr,
                         NULL_TREE";
	       build_call = build_call_expr;
	       build_call_args = "fndecl, 1, res";
             };
